#! /bin/bash
# File: /etc/init.d/unicorn
### BEGIN INIT INFO
# Provides:           unicorn
# Required-Start:    $local_fs $remote_fs $network $syslog
# Required-Stop:     $local_fs $remote_fs $network $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: starts the unicorn server
# Description:       starts unicorn
### END INIT INFO

 #source /home/git/.profile
 #source /home/git/.bashrc
 #source /home/git/.rvm/scripts/rvm
 PATH=/usr/local/sbin:/usr/local/bin:sbin:/bin:/usr/sbin:/usr/bin:/home/git/.rvm/scripts/rvm:/home/git/.rvm
 set -e
 # Feel free to change any of the following variables for your app:
 TIMEOUT=${TIMEOUT-60}
 APP_ROOT=/home/git/deploy/current
 APP_USER=git
 PID=$APP_ROOT/tmp/pids/unicorn.pid
 ENV=production
 UNICORN=/home/git/.rvm/gems/ruby-2.0.0-p353/bin/unicorn

 CMD="unicorn_rails -E $ENV -D -c $APP_ROOT/config/unicorn.rb"

 echo  $CMD >> /home/git/cmd.txt
 echo `which unicorn_rails` >>/home/git/cmd.txt

 action="$1"
 set -u

 old_pid="$PID.oldbin"

 cd $APP_ROOT || exit 1
 sig () {
         test -s "$PID" && kill -$1 `cat $PID`
 }

 oldsig () {
         test -s $old_pid && kill -$1 `cat $old_pid`
 }

 case $action in
 start)
         sig 0 && echo >&2 "Already running" && exit 0
         su --login $APP_USER -c "$CMD"
         ;;
 stop)
         sig QUIT && exit 0
         echo >&2 "Not running"
         ;;
 force-stop)
         sig TERM && exit 0

         echo >&2 "Not running"
         ;;
 restart|reload)
         #sig HUP && echo reloaded OK && exit 0
         sig USR2 && echo reloaded OK && exit 0
         echo >&2 "Couldn't reload, starting '$CMD' instead"
         su --login $APP_USER -c "$CMD"
         ;;
 upgrade)
         if sig USR2 && sleep 2 && sig 0 && oldsig QUIT
         then
                 n=$TIMEOUT
                 while test -s $old_pid && test $n -ge 0
                 do
                         printf '.' && sleep 1 && n=$(( $n - 1 ))
                 done
                 echo

                 if test $n -lt 0 && test -s $old_pid
                 then
                         echo >&2 "$old_pid still exists after $TIMEOUT seconds"
                         exit 1
                 fi
                 exit 0
         fi
         echo >&2 "Couldn't upgrade, starting '$CMD' instead"
         su --login $APP_USER -c "$CMD"
         ;;
 reopen-logs)
         sig USR1
         ;;
 *)
         echo >&2 "Usage: $0 "
         exit 1
         ;;
 esac
